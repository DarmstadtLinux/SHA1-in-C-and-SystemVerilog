/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"
#include <stdint.h> // wegen uint32_t

void testfunction() {
	printf("hello world");
}

uint32_t rotl(uint32_t x, uint32_t n) { // n = rotations, x betreffende variable, w = bitbreite der variable
	return ((x << n) | (x >> (32 - n)));
}

uint32_t f1(uint32_t b, uint32_t c, uint32_t d) {
	return ((b & (c)) | ((~b) & d));
}
uint32_t f2(uint32_t b, uint32_t c, uint32_t d) {
	return (b ^ c ^ d);
}
uint32_t f3(uint32_t b, uint32_t c, uint32_t d) {
	return ((b & c) | ((b & d) | (c & d)));
}
uint32_t f4(uint32_t b, uint32_t c, uint32_t d) {
	return (b ^ c ^ d);
}

void showHash1(uint32_t a, uint32_t b, uint32_t c, uint32_t d, uint32_t e) {

	{
		printf("\n######$# hash :\n%08X\n%08X\n%08X\n%08X\n%08X", a, b, c, d,
				e);

	}
}
void round1(uint32_t H0, uint32_t H1, uint32_t H2, uint32_t H3, uint32_t H4,
		uint32_t K, uint32_t Wj[]) {
	uint32_t a;
	uint32_t b;
	uint32_t c;
	uint32_t d;
	uint32_t e;
	int i = 0;
	for (i = 0; i < 20; i++) {

		a = (H4 + f1(H1, H2, H3) + rotl(H0, 5) + Wj[i] + K);
		b = H0;
		c = rotl(H1, 30);
		d = H2; // D = C
		e = H3; // E = D
		// aktualisieren:
		H0 = a;
		H1 = b;
		H2 = c;
		H3 = d;
		H4 = e;

	}
	showHash1(a, b, c, d, e);
}
void round2(uint32_t H0, uint32_t H1, uint32_t H2, uint32_t H3, uint32_t H4,
		uint32_t K, uint32_t Wj[]) {
	uint32_t a;
	uint32_t b;
	uint32_t c;
	uint32_t d;
	uint32_t e;

	int i = 0;
	for (i = 20; i < 40; i++) {

		a = (H4 + f2(H1, H2, H3) + rotl(H0, 5) + Wj[i] + K);
		b = H0;
		c = rotl(H1, 30);
		d = H2; // D = C
		e = H3; // E = D
		// aktualisieren:
		H0 = a;
		H1 = b;
		H2 = c;
		H3 = d;
		H4 = e;
	}
	showHash1(a, b, c, d, e);

}

void round3(uint32_t H0, uint32_t H1, uint32_t H2, uint32_t H3, uint32_t H4,
		uint32_t K, uint32_t Wj[]) {
	uint32_t a;
	uint32_t b;
	uint32_t c;
	uint32_t d;
	uint32_t e;

	int i = 0;
	for (i = 40; i < 60; i++) {

		a = (H4 + f3(H1, H2, H3) + rotl(H0, 5) + Wj[i] + K);
		b = H0;
		c = rotl(H1, 30);
		d = H2; // D = C
		e = H3; // E = D
		// aktualisieren:
		H0 = a;
		H1 = b;
		H2 = c;
		H3 = d;
		H4 = e;
	}
	showHash1(a, b, c, d, e);
}

void round4(uint32_t H0, uint32_t H1, uint32_t H2, uint32_t H3, uint32_t H4,
		uint32_t K, uint32_t Wj[]) {
	uint32_t a;
	uint32_t b;
	uint32_t c;
	uint32_t d;
	uint32_t e;

	int i = 0;
	for (i = 60; i < 80; i++) {

		a = (H4 + f4(H1, H2, H3) + rotl(H0, 5) + Wj[i] + K);
		b = H0;
		c = rotl(H1, 30);
		d = H2; // D = C
		e = H3; // E = D
		// aktualisieren:
		H0 = a;
		H1 = b;
		H2 = c;
		H3 = d;
		H4 = e;
	}
	showHash1(a, b, c, d, e);
}

int main() {
	alt_putstr("Hello from Nios II!\n");
	printf("Hello with printf");
	// anfangshaswerte , jeder wert 8* 4 Bit = 32 Bit
	uint32_t H0 = 0x67452301;
	uint32_t H1 = 0xefcdab89;
	uint32_t H2 = 0x98badcfe;
	uint32_t H3 = 0x10325476;
	uint32_t H4 = 0xc3d2e1f0;
	uint32_t H0init = 0x67452301; // den immer aktualsieren nach 4 Runden
	uint32_t H1init = 0xefcdab89;
	uint32_t H2init = 0x98badcfe;
	uint32_t H3init = 0x10325476;
	uint32_t H4init = 0xc3d2e1f0;
	printf("Integer Bytes:\t %d", sizeof(int));
	printf("\nuint32_t Bytes:\t %d", sizeof(uint32_t));
	printf("\nWillkomen zum SHA1 - 1 Array Code");
	printf("\n die Testnachricht lautet:\n");
	int m = 24; // leange Nachricht : soviele testbits als nachricht verwenden
	int k;
	int anzBlocks;
	int anzWoerter;
	int testmsg[4000];
	int mp; // gepaddete Nachrichtenlänge
	int loop = 0; // hilfsvaribale für for schleifen... sonst immer neu anlegen...
	for (int i = 0; i < m; i++) {
		if (i % 2)
			testmsg[i] = 1;
		else
			testmsg[i] = 0;
	}
	for (int j = 0; j < m; j++) {
		printf("%d", testmsg[j]);
	}
	// # Padding, Die Nachricht wird nun gepadded:
	// # die gepaddete Nachricht besteht aus:
	// # Nachrichtenlänge = m
	// # Leangeninformation = m64
	// # Ein Bit am Ende der Nachricht = 1
	// # Auffüllen damit vielfaches von 512 = k

	k = 512 - ((m + 1 + 64) % 512);	// # Berechnung von k = anzahl von anzuhängenden "0"-Bits damit die gepaddedet Nachricht ein Vielfaches von 512 ist

	anzBlocks = (m + 1 + 64 + k) / 512; // Berechnung anzhal der Blöcke
	mp = anzBlocks * 512; // Anzahl Bits nach padding
	anzWoerter = anzBlocks * 16;
	printf(
			"\n*Padding-Info:\n Ihre Nachricht hat %d Bits\n (k)%d mal '0' an Nachricht dranhängen\n Insgesamt %d Blöcke\nAnzahl Wörter:%d\n Anzahl gesamt: %d Bits ",
			m, k, anzBlocks, anzWoerter, mp);
	//# hinzufügen des paddings zum array:
	//# 1 nach der nachricht hinzufügen:
	printf("\ndas ende der Nachricht ist an Array index pos: %d \n", m - 1);
	printf("\nfüge padding 1 hinzu an index stelle m\n");
	testmsg[m] = 1; // padding 1 wird direkt nach der nachricht eingefügt
	// # k mal  "0" nach der 1 hinzufügen:
	int looptest = 0;

	for (loop = m + 1; loop < (m + 1 + k); loop++) {
		testmsg[loop] = 0;
		looptest++;
	}
	printf("\n schleife %d durchlaufen! \n", looptest);
	//# Anfügen von 64 bit mit binärer längeninformation der Nachricht
	//# erstmal alle 64 bit auf 0 setzen , damit keine fehlerbits auftauchen
	for (loop = m + k + 1; loop <= m + k + 64; loop++) {
		testmsg[loop] = 0;
	}
	//# jetzt mit dem LSB beginnen und diese 64 bit mit der längeninformation speisen:
	//# letztes k "0" element ist : m+ k , also dieses exkludieren
	// # beginne hinten beim LSB m+k+64
	int speicher = m; // leanger der nachricht wird an speicher übergeben
	for (loop = m + k + 64; loop > m + k; loop--) {
		if (speicher % 2) // wenn rest vorhanden
				{
			testmsg[loop] = 1; // speichere an der stelle eine 1
		} else {
			testmsg[loop] = 0;
		}
		speicher = speicher / 2; // nächster schritt!
	}
	// ausgabe der gepaddetetn nachricht:
	for (int f = 0; f < mp; f++) {
		// hier kleinen zeilensprung für übersichtlichkeit

		printf("%d", testmsg[f]);
		if (f == m) {
			printf("\n");
			printf("%d\n", f);
		}
		if (f == m + k) {
			printf("\n");
			printf("%d\n", f);
		}
		if (f == m + k + 64) {
			printf("\n");
			printf("%d\n", f);
		}
	}

	//# wandle das ganze um, dann momentan belegt jedes bit 32 bit !
	// # eigentlich erstmal alles zu 0 initilaisieren...
	uint32_t compmsg[100]; // jedes element hat 32 Bit!
	for (loop = 0; loop < 16 * anzBlocks; loop++) { // für jedes wort
		for (int u = 0; u < 32; u++) { // schreibe vom akteullen element aus gesehen 32 mal in das aktuelle compmsg element
			// reihenfolge
			if (testmsg[(loop * 32) + u] == 1) {
				compmsg[loop] = compmsg[loop] | (1 << (31 - u)); // an diese stelle eine 1 . verodern
				printf("1");
			} else {
				compmsg[loop] = compmsg[loop] & (~(1 << (31 - u))); // an diese stelle eine 0 verunden
				printf("0");
			}
			//compmsg[loop] = testmsg[loop * 32 + u]; // man befindet sich gerade bei wort "loop" und in der testmsgn bei wort loop + u ( also bit nr. u in block loop)
			int val = (loop * 32) + u;

			if ((val == m) || (val == m + k) || (val == m + k + 64)) {
				printf("\n");
				printf("%d\n", val);

			}
		}
	}

	// "abc"
	compmsg[0] = 0x61626380;
//	compmsg[1] = 0x61626364;

//	for (int i = 0; i < 14; i++) {
//		compmsg[i] = 0x61626364; // "abcd"
//	}
	printf("\n Gepaddedete Nachricht lautet:");
	for (int i = 0; i < anzWoerter; i++) {
		printf("%08X", compmsg[i]);
	}
	//printf(" \n%d\n", compmsg[63]);
	// ###################################################################################################################
	// # der sha1 algorithmus muss für jeden Block in der gepaddetetn nachricht ausgeführt werden
	// # wenn 1 Block verarbeitet wurde mit sha1 muss das 160 Bit ergebnis an die nächste verarbeitung gegeben werden
	// # nur das letzte Ergbenis wird ausgegeben
	// # deswegen hier sha1 so oft ausführen wie es blöcke gibt !
	uint32_t Wj[80];
	for (int r = 0; r < anzBlocks; r++) {
		//sha1 für block r ausführen und ergbnis speichern
		printf("\nBerechnung Block Nr. %d", r);
		for (int i = 0; i < 16; i++) { //// Wj für jeden Block berechnen ! ersten 16 Wörter (32 Bit) der gepaddeten Nachricht
			Wj[i] = compmsg[(r * 16) + i]; // r = aktueller block bei r = 0 wörter: 0...15 lesen, bei r = 1 => 16...31 usw. öletzter block und element bzw. letztes wort: bei 3 *16 +15 =>48...63
		}
		for (int i = 16; i <= 79; i++) {
			Wj[i] = rotl((Wj[i - 16] ^ Wj[i - 14] ^ Wj[i - 8] ^ Wj[i - 3]), 1); // rotl um 1
		}

		//round1(H0, H1, H2, H3, H4, 0x5a82799, Wj);
		//#begin round1
		uint32_t a;
		uint32_t b;
		uint32_t c;
		uint32_t d;
		uint32_t e;
		int i = 0;
		for (i = 0; i < 20; i++) {

			a = (H4 + f1(H1, H2, H3) + rotl(H0, 5) + Wj[i] + 0x5a827999);
			b = H0;
			c = rotl(H1, 30);
			d = H2; // D = C
			e = H3; // E = D
			// aktualisieren:
			H0 = a;
			H1 = b;
			H2 = c;
			H3 = d;
			H4 = e;
		}
		showHash1(a, b, c, d, e);
		//#endround1

		//round2(H0, H1, H2, H3, H4, 0x6ed9eba1, Wj);
		//# begin round 2
		for (i = 20; i < 40; i++) {

			a = (H4 + f2(H1, H2, H3) + rotl(H0, 5) + Wj[i] + 0x6ed9eba1);
			b = H0;
			c = rotl(H1, 30);
			d = H2; // D = C
			e = H3; // E = D
			// aktualisieren:
			H0 = a;
			H1 = b;
			H2 = c;
			H3 = d;
			H4 = e;
		}
		showHash1(a, b, c, d, e);

		//# end round 2
		//round3(H0, H1, H2, H3, H4, 0x8f1bbcdc, Wj);
		// # begin round3
		i = 0;
		for (i = 40; i < 60; i++) {

			a = (H4 + f3(H1, H2, H3) + rotl(H0, 5) + Wj[i] + 0x8f1bbcdc);
			b = H0;
			c = rotl(H1, 30);
			d = H2; // D = C
			e = H3; // E = D
			// aktualisieren:
			H0 = a;
			H1 = b;
			H2 = c;
			H3 = d;
			H4 = e;
		}
		showHash1(a, b, c, d, e);
		// end round 3
		//round4(H0, H1, H2, H3, H4, 0xca62c1d6, Wj);
		// begin round 4
		i = 0;
		for (i = 60; i < 80; i++) {

			a = (H4 + f4(H1, H2, H3) + rotl(H0, 5) + Wj[i] + 0xca62c1d6);
			b = H0;
			c = rotl(H1, 30);
			d = H2; // D = C
			e = H3; // E = D
			// aktualisieren:
			H0 = a;
			H1 = b;
			H2 = c;
			H3 = d;
			H4 = e;
		}
		// end round 4
		H0 = H0 + H0init;
		H1 = H1 + H1init;
		H2 = H2 + H2init;
		H3 = H3 + H3init;
		H4 = H4 + H4init;
		H0init = H0;
		H1init = H1;
		H2init = H2;
		H3init = H3;
		H4init = H4;
		showHash1(H0, H1, H2, H3, H4);
	}

	/* Event loop never exits. */
	while (1)
		;

	return 0;
}
